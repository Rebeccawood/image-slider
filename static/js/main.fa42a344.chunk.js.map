{"version":3,"sources":["Components/styles.jsx","Components/ImageSlider.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Carousel","styled","section","Slider","props","translateValue","Background","div","PaginationItems","totalItems","Pagination","Swipeable","Layout","ImageSlider","width","useState","pagination","setPagination","setTranslateValue","images","changeSlide","pager","imgSlider","document","getElementById","offsetWidth","next","nextSlider","length","Math","floor","page","imgWidth","getNextSlide","id","map","image","index","key","src","alt","paginationLength","totalPagination","push","className","classNames","active","paginationCreator","onClick","App","style","marginTop","marginLeft","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"w/DAEA,IAAMA,EAAWC,IAAOC,QAAV,KAMRC,EAASF,IAAOC,QAAV,KAGe,SAACE,GAAD,OAAWA,EAAMC,kBA0BtCC,EAAaL,IAAOM,IAAV,KAWVC,EAAkBP,YAAO,UAAPA,CAAH,KAIV,SAACG,GAAD,OAAW,IAAMA,EAAMK,cAO5BC,EAAaT,IAAOC,QAAV,KAcVS,EAAYV,IAAOM,IAAV,KAcTK,EAASX,IAAOC,QAAV,K,iBC+BGW,EA1GK,SAACT,GAAW,IA2C1BU,EA3CyB,EACOC,mBAAS,GADhB,mBACtBC,EADsB,KACVC,EADU,OAEeF,mBAAS,GAFxB,mBAEtBV,EAFsB,KAENa,EAFM,KAIvBC,EAAS,CACb,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,gBACA,iBAmCIC,EAAc,SAACC,GACnB,IAAKP,EAAO,CACV,IAAMQ,EAAYC,SAASC,eAAe,UACtCF,IACFR,EAAQQ,EAAUG,aAGtB,IAAMC,EArBa,SAACL,GACpB,IAAMM,EAAaX,EAAaK,EAC1BO,EAASC,KAAKC,MAAMX,EAAOS,OAAS,GAC1C,OAAID,EAAa,EACR,CACLI,KAAMH,EACNI,SAAUlB,GAASc,EAAS,IAG5BD,GAAcC,EACT,CAAEG,KAAM,EAAGC,SAAU,GAEvB,CAAED,KAAMJ,EAAYK,SAAU3B,EAAiBS,EAAQO,GASjDY,CAAaZ,GAC1BJ,EAAcS,EAAKK,MACnBb,EAAkBQ,EAAKM,WAGzB,OACE,kBAACpB,EAAD,KACE,kBAACZ,EAAD,KACE,kBAACG,EAAD,CAAQ+B,GAAG,SAAS7B,eAAgBA,GACjCc,EAAOgB,KAAI,SAACC,EAAOC,GAAR,OACV,6BAASC,IAAG,kBAAaD,IACvB,yBAAKC,IAAG,gBAAWD,GAASE,IAAKH,EAAOI,IAAG,gBAAWH,KACtD,kBAAC/B,EAAD,YAUR,kBAACI,EAAD,KACE,iCA9DoB,WAGxB,IAFA,IAAM+B,EAAmBZ,KAAKC,MAAMX,EAAOS,OAAS,GAC9Cc,EAAkB,GACfL,EAAQ,EAAGA,EAAQI,EAAkBJ,IAC5CK,EAAgBC,KACd,kBAACnC,EAAD,CACEC,WAAYgC,EACZH,IAAG,eAAUD,GACbO,UAAWC,IAAW,CACpBC,OAAQT,IAAUrB,OAK1B,OAAO0B,EAgDOK,IACV,kBAACpC,EAAD,KACE,yBACEqC,QAAS,kBAAM5B,GAAa,IAC5BmB,IAAI,6BACJC,IAAI,eAEN,yBACEQ,QAAS,kBAAM5B,EAAY,IAC3BmB,IAAI,8BACJC,IAAI,oBC3FDS,MAhBf,WACE,OACE,6BACE,gCACE,yBACEC,MAAO,CAAEpC,MAAO,IAAKqC,UAAW,GAAIC,WAAY,IAChDb,IAAI,wBACJC,IAAI,eAEN,yBAAKU,MAAO,CAAEpC,MAAO,KAAOyB,IAAI,kBAAkBC,IAAI,UAExD,kBAAC,EAAD,QCFca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASC,eAAe,SDyHpB,kBAAmBqC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fa42a344.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst Carousel = styled.section`\n  overflow: hidden;\n  position: relative;\n  width: 100%;\n`;\n\nconst Slider = styled.section`\n  display: flex;\n  margin-top: 3.2rem;\n  transform: translateX(-${(props) => props.translateValue}px);\n  transition: transform 1s ease-out;\n  width: 100%;\n\n  & > article {\n    align-items: center;\n    display: flex;\n    flex-shrink: 0;\n    justify-content: space-between;\n    padding: 3.2rem;\n    position: relative;\n    width: 25%;\n\n    & > img {\n      border-radius: 10%;\n      border: 2px solid #d1b4c7;\n      box-shadow: #d1b4c7 14px -13px 10px;\n      height: 21.6rem;\n      max-width: 100%;\n      width: 21.6rem;\n      object-fit: cover;\n      z-index: 1;\n    }\n  }\n`;\n\nconst Background = styled.div`\n  background-color: #e6d1df;\n  border-radius: 10%;\n  display: block;\n  height: 100%;\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 75%;\n`;\n\nconst PaginationItems = styled(\"article\")`\n  background-color: #d1b4c7;\n  height: 0.2rem;\n  margin-right: 0.4rem;\n  width: ${(props) => 100 / props.totalItems}%;\n\n  &.active {\n    background-color: red;\n  }\n`;\n\nconst Pagination = styled.section`\n  display: block;\n  margin-top: 2.4rem;\n  padding: 2rem 0;\n  width: 100%;\n\n  & > section {\n    align-items: center;\n    display: flex;\n    margin-right: 6rem;\n    width: 100%;\n  }\n`;\n\nconst Swipeable = styled.div`\n  display: flex;\n  margin-top: 35px;\n\n  img {\n    cursor: pointer;\n    width: 10%;\n  }\n\n  img:first-child {\n    margin-right: 2.4rem;\n  }\n`;\n\nconst Layout = styled.section`\n  margin: 4.8rem;\n  position: absoloute;\n`;\n\nexport {\n  Carousel,\n  Slider,\n  Background,\n  PaginationItems,\n  Pagination,\n  Swipeable,\n  Layout,\n};\n","import React, { useState } from \"react\";\nimport {\n  Pagination,\n  PaginationItems,\n  Carousel,\n  Slider,\n  Background,\n  Swipeable,\n  Layout,\n} from \"./styles\";\nimport classNames from \"classnames\";\n\nconst ImageSlider = (props) => {\n  const [pagination, setPagination] = useState(0);\n  const [translateValue, setTranslateValue] = useState(0);\n\n  const images = [\n    \"static/01.jpg\",\n    \"static/02.jpg\",\n    \"static/03.jpg\",\n    \"static/04.jpg\",\n    \"static/05.jpg\",\n    \"static/06.jpg\",\n    \"static/07.jpg\",\n    \"static/08.jpg\",\n    \"static/09.jpg\",\n    \"static/10.jpg\",\n    \"static/11.jpg\",\n    \"static/12.jpg\",\n    \"static/13.jpg\",\n    \"static/14.jpg\",\n    \"static/15.jpg\",\n    \"static/16.jpg\",\n    \"static/17.jpg\",\n    \"static/18.jpg\",\n    \"static/19.jpg\",\n  ];\n\n  const paginationCreator = () => {\n    const paginationLength = Math.floor(images.length / 3);\n    const totalPagination = [];\n    for (let index = 0; index < paginationLength; index++) {\n      totalPagination.push(\n        <PaginationItems\n          totalItems={paginationLength}\n          key={`page-${index}`}\n          className={classNames({\n            active: index === pagination,\n          })}\n        />\n      );\n    }\n    return totalPagination;\n  };\n\n  let width;\n  const getNextSlide = (pager) => {\n    const nextSlider = pagination + pager;\n    const length = Math.floor(images.length / 3);\n    if (nextSlider < 0) {\n      return {\n        page: length,\n        imgWidth: width * (length - 1),\n      };\n    }\n    if (nextSlider >= length) {\n      return { page: 0, imgWidth: 0 };\n    }\n    return { page: nextSlider, imgWidth: translateValue + width * pager };\n  };\n  const changeSlide = (pager) => {\n    if (!width) {\n      const imgSlider = document.getElementById(\"slider\");\n      if (imgSlider) {\n        width = imgSlider.offsetWidth;\n      }\n    }\n    const next = getNextSlide(pager);\n    setPagination(next.page);\n    setTranslateValue(next.imgWidth);\n  };\n\n  return (\n    <Layout>\n      <Carousel>\n        <Slider id=\"slider\" translateValue={translateValue}>\n          {images.map((image, index) => (\n            <article key={`article-${index}`}>\n              <img key={`image-${index}`} src={image} alt={`image-${index}`} />\n              <Background />\n              {/* <article key={index}>\n                <Text2>{teacher.name}</Text2>\n                <Text4 as=\"p\">{teacher.description}</Text4>\n                {url && <a href={url}>{teacher.campus.description}</a>}\n              </article> */}\n            </article>\n          ))}\n        </Slider>\n      </Carousel>\n      <Pagination>\n        <section>{paginationCreator()}</section>\n        <Swipeable>\n          <img\n            onClick={() => changeSlide(-1)}\n            src=\"static/icons/arrowleft.png\"\n            alt=\"arrow-left\"\n          />\n          <img\n            onClick={() => changeSlide(1)}\n            src=\"static/icons/arrowRight.png\"\n            alt=\"arrow-right\"\n          />\n        </Swipeable>\n      </Pagination>\n    </Layout>\n  );\n};\n\nexport default ImageSlider;\n","import React from \"react\";\nimport ImageSlider from \"./Components/ImageSlider\";\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <img\n          style={{ width: 430, marginTop: 40, marginLeft: 50 }}\n          src=\"static/foodImages.png\"\n          alt=\"foodImages\"\n        />\n        <img style={{ width: 260 }} src=\"static/byRW.png\" alt=\"byRW\" />\n      </header>\n      <ImageSlider />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}